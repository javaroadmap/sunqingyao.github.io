---
layout:     post
title:      "欢迎来到狗舍"
subtitle:   "Hello world, again"
date:       2017-02-06
author:     "Sun Qingyao"
header-img: "img/post-bg-hello.jpg"
tags:
    - life
    - meta
    - programming
---

> 我想，对于计算机科学领域中的我们而言，保持计算机学的乐趣是极其重要的。最初，从事计算机科学是那么的有意思。但随着那些那些付了钱的客户时不时受到亏待，我们开始认真对待他们的抱怨，我们开始觉得自己似乎有义务确保这些机器成功、且没有错误的完美运行。然而，我认为实际上我们并没有这样的义务。我们应去延展机器的功能，让它们驶向新的方向，并让房间充满欢乐。我希望计算机科学领域永远不失趣味。总之，我希望，你们不要成为传教士。不要觉得你们是圣经推销员——这个世界上那些人已经太多了。你们学到的有关计算的知识别人也会学到，所以不要以为成功计算的秘诀只掌握在你们的手中。我认为并且希望，在你们手中握着的是智慧：一种相比初见计算机时看得更多，并且运用得更多的能力。

<p style="text-align:right;">——艾伦·佩利 (1922.4.1 - 1990.2.7)</p>

大约一个礼拜之前，我自己通过Jekyll做过一个界面非常简陋的博客，简陋到我不愿花更多时间去维护它，或是写博文。最近有幸在知乎上看到了[Hux的博客][1]，觉得很好看，就fork了他的[模版][2]，然后在它的基础上重新搭建了自己的博客。

不得不感叹[轮子][3]的力量：连JavaScript都不会的我，在这个开源项目的帮助下，只花了一天，就做出了这样一个看起来还挺像样的博客，而且光是写文字和找图就花了我2/3天。正因技术成本如此低廉，我才能把主要精力集中在内容上——技术终究只是方式，内容才是目的。开源软件对提高轮子的数量和质量做出了巨大的贡献，而更多更好的轮子又能反过来催生更多更好的轮子，这是个很好的正反馈。

值得注意的是，过度依赖这种“开箱即用”的工具容易使人变得懒惰，因此有人不推荐初学者在掌握CSS之前学习Bootstrap，尽管后者是十分优秀的开源CSS框架。确实，有些东西属于每个程序员都必备的基本功，但是我们也不可否认，对于已经掌握了基础知识的人来说，用好轮子可以让开发变得更高效。现在前端项目一般不直接用HTML／CSS／JavaScript写，而会使用jQuery和Node.js等前端工具，便是很好的例证。

我个人有一种感觉，软件工程似乎正在变成“轮子工程”，各式各样的软件、库、框架、API已经遍历了可能获得应用的大部分领域。开发项目的时候工程师们不会重新发明轮子，而会先去找合适的轮子，再根据文档让它服务于自己的工程，只有在没有可用轮子的时候才自己造。如果有心，程序员还会做好接口，便于后来者将自己的项目作为轮子使用。概括来说，软件开发就是按需组合基本元素，再把它抽象成更高级的基本元素的过程。在这个过程中，轮子相当于一个黑盒抽象，我们通常只关心它能做什么，而不在意它是怎么实现的。因此我想，对于当代的程序员而言，具备信息搜集、文档阅读、交流和自学的能力在某种程度上比精通算法与数据结构更重要。

事实上，所有的学科都是轮子的艺术，因为它们都是在前人工作的基础上建立起来的。但软件工程和其他领域相比具有一些很好的性质。拿我比较熟悉的数学和电子学举两个例子吧：在数学中，我们可以用费马引理证明罗尔中值定理，再用罗尔中值定理证明拉格朗日中值定理，然而在证明一些题目时我们需要同时用到费马引理和拉氏定理。与数学不同，软件工程有**封装**的概念。我们用C实现Python，再用Python写出各种程序，而用Python程序员不需要对C有任何认识（理论上在Python里内嵌C和在C里内嵌Python都是可行的，但这种“黑魔法”我们暂时就不讨论了）。不同抽象层的代码之间存在人为树立的抽象壁垒、仅仅通过接口交流，这就是封装。它的好处在于减少了单个程序员需要掌握的知识，同时使得项目与项目之间变得更为独立，促进行业的分化发展。

再比方说，软件工程虽是工科，但它与一般工科不同，是**理想化**的。在电子学中，简单地把8个电压增益为10x的放大器串联起来，不会产生一个放大倍率为一亿的放大器，因为元件存在误差以及偏置电压不足。在设计电路时，我们还要考虑版图上器件的空间位置、器件间的电磁波干扰甚至环境温度的影响。最后，还需要将设计好的电路做成实物，再通过一系列的测试才算完成。必须考虑“实际情况”使芯片的设计变得十分复杂、依赖经验，这意味着入门门槛的提高与学习成本的上升。而在软件工程中，即使是最底层的汇编语言也距离硬件有一定的距离。在软件工程师眼中，所有元件都是理想元件，把8个将输入放大10倍的函数嵌套起来，必将产生一个将输入放大一亿倍的函数。这一性质导致软件开发变得更理性、更易于理解。

数学和电子学等学科从一开始就是“硬核”游戏，相比之下，封装和抽象等性质把编程的初始学习成本降得很低。在中后期，成为卓越的程序员需要付出的代价不比成为卓越的数学家或者硬件工程师需要的少，但是在前期，编程是易上手的技能，所以只需少量时间和一点创意，在轮子的帮助下，小白也能写出不错的东西。此外，编程带来的回报很可观，因此很容易产生成就感。更重要的是，这种反馈是即时的，只需运行一下就能得到结果，而不用花几个星期造板子或是等几个世纪之后的人应用你的定理。低成本，高收益，回报周期短，这些特性让编程很容易变成一件有趣的事情、一种业余爱好、或是一种消遣。有的人永远长不大，只是玩具不断升级。小时候我喜欢用轮子造车，现在依然喜欢，唯一的区别是用的轮子和造的车不同了。

愿编程乐趣永驻，无论我以后做不做程序员。

<!-- 说了那么多其实就是想安利你们编程…… -->


  [1]: https://huangxuan.me
  [2]: https://github.com/Huxpro/huxblog-boilerplate
  [3]: https://en.wikipedia.org/wiki/Reinventing_the_wheel
